{"name": "test_login_func[invalid_user-invalid_pass-Epic sadface: Username and password do not match any user in this service-None]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find Chrome binary\nStacktrace:\n0   chromedriver                        0x0000000104867f48 chromedriver + 4226888\n1   chromedriver                        0x00000001048604f4 chromedriver + 4195572\n2   chromedriver                        0x00000001044a4d68 chromedriver + 281960\n3   chromedriver                        0x00000001044cbc24 chromedriver + 441380\n4   chromedriver                        0x00000001044ca150 chromedriver + 434512\n5   chromedriver                        0x000000010450793c chromedriver + 686396\n6   chromedriver                        0x0000000104507164 chromedriver + 684388\n7   chromedriver                        0x00000001044d3f1c chromedriver + 474908\n8   chromedriver                        0x00000001044d4ef4 chromedriver + 478964\n9   chromedriver                        0x000000010482959c chromedriver + 3970460\n10  chromedriver                        0x000000010482d6f0 chromedriver + 3987184\n11  chromedriver                        0x00000001048335b4 chromedriver + 4011444\n12  chromedriver                        0x000000010482e2fc chromedriver + 3990268\n13  chromedriver                        0x00000001048061c0 chromedriver + 3826112\n14  chromedriver                        0x000000010484a088 chromedriver + 4104328\n15  chromedriver                        0x000000010484a1e0 chromedriver + 4104672\n16  chromedriver                        0x0000000104859f28 chromedriver + 4169512\n17  libsystem_pthread.dylib             0x0000000184c6ffa8 _pthread_start + 148\n18  libsystem_pthread.dylib             0x0000000184c6ada0 thread_start + 8", "trace": "@pytest.fixture(scope=\"function\")\n    def driver():\n        options = webdriver.ChromeOptions()\n>       driver = webdriver.Chrome(options=options, service=ChromeService(ChromeDriverManager().install()))\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconftest.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:47: in __init__\n    super().__init__(\n.venv/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:69: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:261: in __init__\n    self.start_session(capabilities)\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:362: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1052acb90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot find Chrome binary\",\"stac...000184c6ffa8 _pthread_start + 148\\\\n18  libsystem_pthread.dylib             0x0000000184c6ada0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find Chrome binary\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104867f48 chromedriver + 4226888\nE       1   chromedriver                        0x00000001048604f4 chromedriver + 4195572\nE       2   chromedriver                        0x00000001044a4d68 chromedriver + 281960\nE       3   chromedriver                        0x00000001044cbc24 chromedriver + 441380\nE       4   chromedriver                        0x00000001044ca150 chromedriver + 434512\nE       5   chromedriver                        0x000000010450793c chromedriver + 686396\nE       6   chromedriver                        0x0000000104507164 chromedriver + 684388\nE       7   chromedriver                        0x00000001044d3f1c chromedriver + 474908\nE       8   chromedriver                        0x00000001044d4ef4 chromedriver + 478964\nE       9   chromedriver                        0x000000010482959c chromedriver + 3970460\nE       10  chromedriver                        0x000000010482d6f0 chromedriver + 3987184\nE       11  chromedriver                        0x00000001048335b4 chromedriver + 4011444\nE       12  chromedriver                        0x000000010482e2fc chromedriver + 3990268\nE       13  chromedriver                        0x00000001048061c0 chromedriver + 3826112\nE       14  chromedriver                        0x000000010484a088 chromedriver + 4104328\nE       15  chromedriver                        0x000000010484a1e0 chromedriver + 4104672\nE       16  chromedriver                        0x0000000104859f28 chromedriver + 4169512\nE       17  libsystem_pthread.dylib             0x0000000184c6ffa8 _pthread_start + 148\nE       18  libsystem_pthread.dylib             0x0000000184c6ada0 thread_start + 8\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException"}, "parameters": [{"name": "username", "value": "'invalid_user'"}, {"name": "password", "value": "'invalid_pass'"}, {"name": "expected_error", "value": "'Epic sadface: Username and password do not match any user in this service'"}, {"name": "expected_url", "value": "None"}], "start": 1754146051082, "stop": 1754146051082, "uuid": "a35d0875-87bc-4892-b8f7-8c86152ff222", "historyId": "f0d321dfb9c613c5ede605e73bca0f63", "testCaseId": "8b2ccb9458f5546e22b00ba84e63598c", "fullName": "tests.web.test_login#test_login_func", "labels": [{"name": "parentSuite", "value": "tests.web"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "Sokolovs-Air"}, {"name": "thread", "value": "9819-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.web.test_login"}]}