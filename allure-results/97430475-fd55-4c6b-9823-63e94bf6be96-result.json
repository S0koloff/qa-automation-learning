{"name": "test_add_item_to_cart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=138.0.7204.157)\nStacktrace:\n0   chromedriver                        0x0000000104ef355c cxxbridge1$str$ptr + 2731064\n1   chromedriver                        0x0000000104eeb454 cxxbridge1$str$ptr + 2698032\n2   chromedriver                        0x0000000104a3a3f8 cxxbridge1$string$len + 90664\n3   chromedriver                        0x0000000104a80f88 cxxbridge1$string$len + 380344\n4   chromedriver                        0x0000000104ac2b1c cxxbridge1$string$len + 649548\n5   chromedriver                        0x0000000104a75a0c cxxbridge1$string$len + 333884\n6   chromedriver                        0x0000000104eb65e0 cxxbridge1$str$ptr + 2481340\n7   chromedriver                        0x0000000104eb9848 cxxbridge1$str$ptr + 2494244\n8   chromedriver                        0x0000000104e97234 cxxbridge1$str$ptr + 2353424\n9   chromedriver                        0x0000000104eba104 cxxbridge1$str$ptr + 2496480\n10  chromedriver                        0x0000000104e882e4 cxxbridge1$str$ptr + 2292160\n11  chromedriver                        0x0000000104ed9ff8 cxxbridge1$str$ptr + 2627284\n12  chromedriver                        0x0000000104eda184 cxxbridge1$str$ptr + 2627680\n13  chromedriver                        0x0000000104eeb090 cxxbridge1$str$ptr + 2697068\n14  libsystem_pthread.dylib             0x0000000184c6ffa8 _pthread_start + 148\n15  libsystem_pthread.dylib             0x0000000184c6ada0 thread_start + 8", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c1e984ec124db95881e8208c9c98cae0\")>\n\n    @allure.feature(\"Корзина покупок\")\n    def test_add_item_to_cart(driver):\n        with allure.step(\"authorization\"):\n            login_page = LoginPage(driver)\n            login_page.open()\n            login_page.enter_username(\"standard_user\")\n            login_page.enter_password(\"secret_sauce\")\n            login_page.click_login()\n    \n        with allure.step(\"Add item to cart\"):\n            inventory_page = InventoryPage(driver)\n>           inventory_page.add_item_to_cart(\"Sauce Labs Bike Light\")\n\ntests/web/test_cart.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/inventory_page.py:13: in add_item_to_cart\n    item_cards = self.driver.find_elements(self.INVENTORY_ITEM)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:963: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1070ed6a0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...000184c6ffa8 _pthread_start + 148\\\\n15  libsystem_pthread.dylib             0x0000000184c6ada0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=138.0.7204.157)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104ef355c cxxbridge1$str$ptr + 2731064\nE       1   chromedriver                        0x0000000104eeb454 cxxbridge1$str$ptr + 2698032\nE       2   chromedriver                        0x0000000104a3a3f8 cxxbridge1$string$len + 90664\nE       3   chromedriver                        0x0000000104a80f88 cxxbridge1$string$len + 380344\nE       4   chromedriver                        0x0000000104ac2b1c cxxbridge1$string$len + 649548\nE       5   chromedriver                        0x0000000104a75a0c cxxbridge1$string$len + 333884\nE       6   chromedriver                        0x0000000104eb65e0 cxxbridge1$str$ptr + 2481340\nE       7   chromedriver                        0x0000000104eb9848 cxxbridge1$str$ptr + 2494244\nE       8   chromedriver                        0x0000000104e97234 cxxbridge1$str$ptr + 2353424\nE       9   chromedriver                        0x0000000104eba104 cxxbridge1$str$ptr + 2496480\nE       10  chromedriver                        0x0000000104e882e4 cxxbridge1$str$ptr + 2292160\nE       11  chromedriver                        0x0000000104ed9ff8 cxxbridge1$str$ptr + 2627284\nE       12  chromedriver                        0x0000000104eda184 cxxbridge1$str$ptr + 2627680\nE       13  chromedriver                        0x0000000104eeb090 cxxbridge1$str$ptr + 2697068\nE       14  libsystem_pthread.dylib             0x0000000184c6ffa8 _pthread_start + 148\nE       15  libsystem_pthread.dylib             0x0000000184c6ada0 thread_start + 8\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidArgumentException"}, "steps": [{"name": "authorization", "status": "passed", "start": 1753135874213, "stop": 1753135876182}, {"name": "Add item to cart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=138.0.7204.157)\nStacktrace:\n0   chromedriver                        0x0000000104ef355c cxxbridge1$str$ptr + 2731064\n1   chromedriver                        0x0000000104eeb454 cxxbridge1$str$ptr + 2698032\n2   chromedriver                        0x0000000104a3a3f8 cxxbridge1$string$len + 90664\n3   chromedriver                        0x0000000104a80f88 cxxbridge1$string$len + 380344\n4   chromedriver                        0x0000000104ac2b1c cxxbridge1$string$len + 649548\n5   chromedriver                        0x0000000104a75a0c cxxbridge1$string$len + 333884\n6   chromedriver                        0x0000000104eb65e0 cxxbridge1$str$ptr + 2481340\n7   chromedriver                        0x0000000104eb9848 cxxbridge1$str$ptr + 2494244\n8   chromedriver                        0x0000000104e97234 cxxbridge1$str$ptr + 2353424\n9   chromedriver                        0x0000000104eba104 cxxbridge1$str$ptr + 2496480\n10  chromedriver                        0x0000000104e882e4 cxxbridge1$str$ptr + 2292160\n11  chromedriver                        0x0000000104ed9ff8 cxxbridge1$str$ptr + 2627284\n12  chromedriver                        0x0000000104eda184 cxxbridge1$str$ptr + 2627680\n13  chromedriver                        0x0000000104eeb090 cxxbridge1$str$ptr + 2697068\n14  libsystem_pthread.dylib             0x0000000184c6ffa8 _pthread_start + 148\n15  libsystem_pthread.dylib             0x0000000184c6ada0 thread_start + 8\n\n", "trace": "  File \"/Users/sokolov/Documents/qa-automation-learning/qa-automation-learning/tests/web/test_cart.py\", line 17, in test_add_item_to_cart\n    inventory_page.add_item_to_cart(\"Sauce Labs Bike Light\")\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/sokolov/Documents/qa-automation-learning/qa-automation-learning/pages/inventory_page.py\", line 13, in add_item_to_cart\n    item_cards = self.driver.find_elements(self.INVENTORY_ITEM)\n  File \"/Users/sokolov/Documents/qa-automation-learning/qa-automation-learning/.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 963, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/sokolov/Documents/qa-automation-learning/qa-automation-learning/.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 454, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"/Users/sokolov/Documents/qa-automation-learning/qa-automation-learning/.venv/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1753135876182, "stop": 1753135876186}], "start": 1753135874199, "stop": 1753135876204, "uuid": "4b8cd8bd-9fc5-439a-8219-d4d5f59adbe1", "historyId": "7917315fde1af617c4ed5737863796ad", "testCaseId": "7917315fde1af617c4ed5737863796ad", "fullName": "tests.web.test_cart#test_add_item_to_cart", "labels": [{"name": "feature", "value": "Корзина покупок"}, {"name": "parentSuite", "value": "tests.web"}, {"name": "suite", "value": "test_cart"}, {"name": "host", "value": "Sokolovs-MacBook-Air.local"}, {"name": "thread", "value": "8723-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.web.test_cart"}]}